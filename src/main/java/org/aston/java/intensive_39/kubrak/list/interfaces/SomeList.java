package org.aston.java.intensive_39.kubrak.list.interfaces;

import java.util.Comparator;

/**
 * Параметризованный интерфейс, отображающий методы без реализации, необходимые для хранения и обработки списка элементов.
 *
 * @param <T> тип элементов, с которым будет работать  класс, имплементирующий данный интерфейс.
 * @author Konstantin_Kubrak
 */
public interface SomeList<T> {

    /**
     * Вставка элемента в конец коллекци.
     *
     * @param t объект, которым будет вставлен в коллекцию.
     */
    void put(T t);

    /**
     * Вставка элемента в коллекцию на определённую позицию со смещением уже имеющихся элементов вправо.
     *
     * @param t     объект, которым будет вставлен в коллекцию.
     * @param index позиция, на которую будет произведена вставка.
     */
    void insert(T t, int index);

    /**
     * Удаление элемента коллекции на определённой позиции.
     *
     * @param index номер позиции, на которой будет удалён объект.
     * @return возвращает элемент коллекции.
     */
    T get(int index);

    /**
     * Удаление элемента коллекции на определённой позиции.
     *
     * @param index индекс позиции, на которой будет удалён объект.
     */
    void delete(int index);

    /**
     * Удаление всех элементов коллекции.
     */
    void deleteAll();

    /**
     * Замещение одного элемента коллекции на другой.
     *
     * @param t     объект, которым будет замещён старый объект.
     * @param index позиция, на которой будет произведена замена.
     */
    void set(T t, int index);

    /**
     * Получение текущего размера коллекции.
     *
     * @return возвращает текущий размер коллекции.
     */
    int size();

    /**
     * Получение индекса, под которым объект хранится в коллекции.
     *
     * @param t объект, чей индекс необходимо найти.
     * @return возвращает индекс.
     */
    int getIndex(T t);

    /**
     * Проверка, является ли коллекция пустой.
     *
     * @return возвращает результат проверки.
     */
    boolean isEmpty();

    /**
     * Проверка, содержится ли объект в коллекции.
     *
     * @param t объект, в отношении которого будет произведён поиск
     * @return возвращает результат проверки.
     */
    boolean contains(T t);

    /**
     * Сортировка элементов коллекции в естественном порядке.
     */
    void sort();

    /**
     * Сортировка элементов коллекции с учётом переданного в параметрах компаратора.
     *
     * @param comparator компаратор для изменения условий сортировки
     */
    void sort(Comparator<T> comparator);
}
